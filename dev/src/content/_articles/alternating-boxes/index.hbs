---
section: "Blog"
bodyclass: "page-blog"
post: true
layout: page.hbs

title: "Alternating Boxes"
pageid: "alternating-boxes"

intro: "After discussing an idea for a simple website with one of my design colleagues the other day I took it on myself to try and build a demo of the layout we were discussing. The idea seemed simple: a responsive grid with alternating coloured sections in a checker-board pattern. Sounds easy right…"

posted: 2015-03-22
published: true

---

<section>

    <h1>Alternating boxes</h1>
    <h2>Creating a responsive checker-board layout using :nth-child</h2>

    <p>After discussing an idea for a simple website with one of my design colleagues the other day I took it on myself to try and build a demo of the layout we were discussing. The idea seemed simple: a responsive grid with alternating coloured sections in a checker-board pattern. Sounds easy right…</p>

    <figure>
        <img src="https://s3.amazonaws.com/stphnsn-assets/images/alternating-grid/alternating-grid.png" alt="Desired layouts">
    </figure>

    <p>1) Mobile first - single column. 2) Two column alternating sections. 3) Three column checker-board.</p>

    <h3>Markup</h3>

    <p>I wanted to keep the markup pretty clean so I used a series of <code>&lt;section&gt;</code> elements and gave each an internal content container. The number of sections would not be fixed.</p>

    <div class="code-block">
    <h6>HTML</h6>
        <pre>
            <code>
&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta name="viewport" content="width=device-width,initial-scale=1"&gt;
    &lt;title&gt;Alternating boxes&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

    &lt;div class="container"&gt;

        &lt;section&gt;
            &lt;div class="section-content"&gt;
                &lt;h1&gt;Section 1&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;div class="section-content"&gt;
                &lt;h1&gt;Section 2&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;div class="section-content"&gt;
                &lt;h1&gt;Section 3&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;div class="section-content"&gt;
                &lt;h1&gt;Section 4&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;div class="section-content"&gt;
                &lt;h1&gt;Section 5&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;div class="section-content"&gt;
                &lt;h1&gt;Section 6&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/section&gt;

        ...

    &lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;</code>
        </pre>
    </div>

    <h3>Mobile first</h3>

    <p>To make the single column layout I just stacked the sections and gave them a fixed height. I used <code>:nth-child(odd)</code> to change the background and foreground colours of every other <code>section</code>.</p>

    <p>I started using <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes" rel="external">flexbox layout</a> with the <code>align-items: center;</code> declaration to align the section content vertically.</p>

    <div class="code-block">
    <h6>CSS</h6>
        <pre>
            <code>
    .container {
        display: flex;
        flex-flow: row wrap;
        width: 100%;
    }

    section {
        align-items: center;
        background-color: #EEE;
        box-sizing: border-box;
        display: flex;
        height: 300px;
        width: 100%;
    }

    section:nth-child(odd) {
        background-color: #111;
        color: #EEE;
    }       </code>
        </pre>
    </div>

    <h3>Flexbox columns</h3>

    <p>Things start to get interesting when using flexbox to flow content into columns. The <code>flex-flow: row wrap;</code> declaration on the container makes the sections flow into columns depending on how wide each one is. Setting the section width to 100% means they take up the full available width and won’t wrap. 50% wide sections wrap into a two column grid, 33.33333% makes three columns, 25% four and 20% five.</p>

    <p>I added the section widths inside media queries at breakpoints that felt natural. There's no point getting all anal about choosing breakpoints based on device screen sizes. I always use the content as a guide.</p>

    <p>As the source order of the sections stays the same the content flows left to right and wraps down to the next row. I needed to override the <code>:nth-child(odd)</code> style rules so I used a more specific selector to reset the colour changes and set the new widths.</p>

    <div class="code-block">
    <h6>Flexbox Columns</h6>
        <pre>
            <code>
    @media screen and (min-width: 450px) {

        section:nth-child(1n) {
            background-color: #EEE;
            color: #111;
            width: 50%;
        }

        section:nth-child(4n+1),
        section:nth-child(4n+4) {
            background-color: #111;
            color: #EEE;
        }
    }       </code>
        </pre>
    </div>

    <h3>Alternating boxes</h3>

    <p>In one column the black then white, odd/even CSS is straight forward. In two columns every first and every fourth section needs to be black. I used a pair of <code>:nth-child</code> selectors to set this pattern.</p>

    <p>In three columns only the odd numbered sections need to be black so I went back to using <code>:nth-child(odd)</code>. In four columns the maths is a little more complex. Every 1st, 3rd, 6th and 8th section is black.</p>

    <div class="code-block">
    <h6>Four Columns</h6>
        <pre>
            <code>
    @media screen and (min-width: 1350px) {

        section:nth-child(1n) {
            background-color: #EEE;
            color: #111;
            width: 25%;
        }

        section:nth-child(8n+1),
        section:nth-child(8n+3),
        section:nth-child(8n+6),
        section:nth-child(8n+8) {
            background-color: #111;
            color: #EEE;
        }
    }       </code>
        </pre>
    </div>

    <p>What seemed to be a simple layout proved to be a lot more challenging than I first thought. You can see the finished result - with responsive styling for one to five columns on <a href="http://codepen.io/rpstephenson/pen/YPRrPQ" rel="external">codepen</a>.

    <div class="cta">
        <a href="http://codepen.io/rpstephenson/pen/YPRrPQ" rel="external">VIEW CODEPEN</a>
    </div>

</section>